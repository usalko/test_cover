#!/bin/bash

PYTHON_VERSION=3.10
COMMAND=$1
while [[ "$#" -gt 0 ]]; do
    case $1 in
    --python-version)
        PYTHON_VERSION="$2"
        shift
        shift
        ;;
    *)
        COMMAND=$1
        shift
        break
        ;;
    esac
    shift
done

PYTHON=python$PYTHON_VERSION
# CHECK PYTHON 3
if command -v "$PYTHON" &>/dev/null; then
    echo Python3 available
else
    echo Python3 not available, please install it or add to the PATH variable
    exit 1
fi

# CHECK PIP
if command -v "$PYTHON" -m pip &>/dev/null; then
    echo Pip available
else
    echo Pip not available, please install it or add to the PATH variable
    exit 1
fi

# CHECK VIRTUALENV COMMAND
if command -v "$PYTHON" -m venv &>/dev/null; then
    echo Venv command available
else
    echo Venv not available, please install it [For example: python3 -m pip install python-venv]
    exit 1
fi

# CHECK VENV NOT EXISTS
if [ ! -d .venv ]; then

    $PYTHON -m venv .venv
    if [ ! -d .pip ]; then
        mkdir .pip
        curl https://bootstrap.pypa.io/get-pip.py -o .pip/get-pip.py
    fi
    .venv/bin/python3 .pip/get-pip.py
    .venv/bin/pip3 install -r requirements.dev.txt
fi

if [ -f '.env' ]; then
    echo Use .env file to read sensitive information
    while IPS='=' read -r key _; do
        if [ "${key}" != "" ] && [[ ! "${key}" =~ .*#.* ]]; then
            eval "export ${key}"
        fi
    done <'.env'
else
    # REGENERATE SENSITIVE INFO FROM TEMPLATE
    cat >'.env' <<EOF

DEBUG=True
EOF
fi

echo EXECUTE
echo "=========== $COMMAND"
echo "$COMMAND ==========="
echo COMMAND

function clean {
    echo "Clean temporary folders"
    find . -name __pycache__ -print0 | xargs -0 rm -fr
}

if [ "$COMMAND" == "redeps" ]; then
    echo "Reinstall dependencies"
    .venv/bin/pip3 install -r requirements.dev.txt
fi

if [ "$COMMAND" == "clean" ]; then
    clean
fi

if [ "$COMMAND" == "tests" ] || [ "$COMMAND" == "test" ]; then
    echo Run tests
    .venv/bin/python -m unittests tests

fi

if [ "$COMMAND" == "tests" ] || [ "$COMMAND" == "test" ]; then
    echo Run tests
    .venv/bin/python -m unittests tests

fi

if [ "$COMMAND" == "release" ]; then
    echo Build release
    clean
    .venv/bin/python setup.py sdist upload
    .venv/bin/python setup.py bdist_wheel upload
fi

if [ "$COMMAND" == "dist" ]; then
    echo Build dist
    clean
    .venv/bin/python setup.py sdist
    .venv/bin/python setup.py bdist_wheel
    ls -l dist
fi

if [ "$COMMAND" == "install" ]; then
    echo Install
    clean
    .venv/bin/python setup.py install
fi

# =================================================================================================

AVAILABLE_COMMANDS="tests redeps clean release dist install"
echo ''
[[ $AVAILABLE_COMMANDS =~ (^| )$COMMAND($| ) ]] && echo 'Ok' || echo 'Unknown command: ' "$COMMAND" && echo 'Available commands are: ' "$AVAILABLE_COMMANDS"
